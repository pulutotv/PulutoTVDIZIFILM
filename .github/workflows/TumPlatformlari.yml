# GitHub Actions İş Akışının Adı
name: Tum Platformlari Guncelle

# Bu iş akışının ne zaman çalışacağını belirleyen tetikleyiciler
on:
  # "main" branch'ine her push yapıldığında çalıştır
  push:
    branches: [ main ]
  # GitHub Actions arayüzünden manuel olarak çalıştırma imkanı sunar
  workflow_dispatch:
  # Her 6 saatte bir otomatik çalıştır
  schedule:
    - cron: '0 */6 * * *'

# İş akışında çalıştırılacak işler
jobs:
  build-and-commit:
    # İşin çalışacağı sanal makine ortamı
    runs-on: ubuntu-latest

    # İş akışına deponuza yazma izni veriyoruz
    permissions:
      contents: write

    # İşin adımları
    steps:
      # 1. Adım: Kodu sanal makineye kopyala
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Adım: Python ortamını kur
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      # 3. Adım: Gerekli kütüphaneleri yükle
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # 4. Adım: Tüm scraper betiklerini sırayla çalıştır
      # Bir betik hata verse bile diğerlerinin çalışmaya devam etmesi için "continue-on-error: true" kullanıldı.
      - name: Run All Scraper Scripts
        continue-on-error: true
        run: |
          python "${{ github.workspace }}/m3u/DiziFunFilm.py"
          python "${{ github.workspace }}/m3u/DiziFunDizi.py"

      # 5. Adım: Değişiklikleri Depoya İşle (Commit and Push)
      - name: Commit and push if there are changes
        run: |
          # Betiklerin ana dizine oluşturduğu tüm .m3u dosyalarını m3u/ klasörüne taşı
          # Bu komut dosya adlarındaki boşluk veya özel karakterlerle başa çıkabilir.
          find . -maxdepth 1 -type f -name "*.m3u" -exec mv {} m3u/ \;

          # Git için kullanıcı yapılandırması yap
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

          # m3u klasöründeki tüm değişiklikleri Git'e ekle
          git add m3u/

          # Eğer işlenecek bir değişiklik varsa, commit at ve push'la
          if ! git diff --staged --quiet; then
            git commit -m "Güncel: M3U listeleri otomatik olarak güncellendi"
            
            # --- ENTEGRE EDİLEN KISIM ---
            # Push yapmadan önce uzak sunucudaki değişiklikleri çek.
            # --rebase seçeneği, birleştirme (merge) commit'i oluşturmak yerine
            # kendi commit'inizi en üste taşıyarak daha temiz bir tarihçe sağlar.
            git pull --rebase
            
            git push
          else
            echo "M3U listelerinde herhangi bir değişiklik bulunamadı. Commit atılmayacak."
          fi